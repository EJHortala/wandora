 /*
 * WANDORA
 * Knowledge Extraction, Management, and Publishing Application
 * http://wandora.org
 * 
 * Copyright (C) 2004-2016 Wandora Team
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * 
 */

package org.wandora.application.tools.extractors.facebook.v2;

import com.restfb.types.Page;
import com.restfb.types.User;
import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;
import org.wandora.application.Wandora;

import org.wandora.application.gui.simple.*;

/**
 *
 * @author Eero Lehtonen
 */


public class FBGraphExtractorPanel extends javax.swing.JPanel {


	private static final long serialVersionUID = 1L;
	
	private Wandora app;
    private JDialog window;
    
    private boolean allPermissionsSelected;
    
    private static final Dimension DIMENSION = new Dimension(500, 500);
    
    /**
     * Creates new form FacebookGraphExtractorPanel
     */
    public FBGraphExtractorPanel() {
        initComponents();
        
        initPermissions();
        
    }

    private void initPermissions() {

        DefaultTableModel m = (DefaultTableModel)permTable.getModel();

        allPermissionsSelected = false;
        
        for(String perm: AbstractFBGraphExtractor.PERMISSIONS){
            m.addRow(new Object[]{perm, "", false});
        }
    }
    
    private void toggleAllPermissions(boolean b) {
        DefaultTableModel m = (DefaultTableModel)permTable.getModel();

        for (int i = 0; i < m.getRowCount(); i++) {
            m.setValueAt(b, i, 2);
        }
        
    }
    
    
    void open() {
        app = Wandora.getWandora();
        window = new JDialog(app, AbstractFBGraphExtractor.NAME, true);
        window.add(this);
        window.setSize(DIMENSION);
        app.centerWindow(window);
        window.setVisible(true);
    }
    
    private void handlePermissionsRequest() {
        DefaultTableModel m = (DefaultTableModel)permTable.getModel();
        ArrayList<String> l = new ArrayList<>();
        
        for (int i = 0; i < m.getRowCount(); i++) {
            if((boolean)m.getValueAt(i, 2)){
                l.add((String)m.getValueAt(i, 0));
            }
        }
        
        AbstractFBGraphExtractor.openBrowser(l);
        
    }
    
    private void checkPermissionsStatus() {
         
    }
    
    private void setup() {
        String token = tokenField.getText();
        AbstractFBGraphExtractor.setAccessToken(token);
        AbstractFBGraphExtractor.setupClient();
        
        List<String> scopes = AbstractFBGraphExtractor.getScopes();
        
        DefaultTableModel m = (DefaultTableModel)permTable.getModel();
        
        for (int i = 0; i < m.getRowCount(); i++) {
            String scope = (String)m.getValueAt(i, 0);
            if(scopes.contains(scope)){
                m.setValueAt("granted", i, 1);
                m.setValueAt(true, i , 2);
            } else {
                m.setValueAt("not granted", i, 1);
                m.setValueAt(false, i , 2);
            }
        }

        
    }
    
    protected boolean wasAccepted = false;
    private void submit(){
        this.window.setVisible(false);
        this.wasAccepted = true;
    }
    
    protected String getObjectId(){
        Component selected = tabPane.getSelectedComponent();
        if(selected.equals(userPanel)){
            return userIdField.getText();
        } else {
            return pageIdField.getText();
        }
    }

    protected Class getObjectClass(){
        Component selected = tabPane.getSelectedComponent();
        if(selected.equals(userPanel)){
            return User.class;
        } else {
            return Page.class;
        }
    }
    
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabPane = new SimpleTabbedPane();
        permPanel = new SimplePanel();
        permTablePane = new SimpleScrollPane();
        permTable = new SimpleTable();
        selectAllPermissionsButton = new SimpleButton();
        askForTokenButton = new SimpleButton();
        tokenField = new SimpleField();
        saveTokenButton = new SimpleButton();
        userPanel = new SimplePanel();
        userIdField = new javax.swing.JTextField();
        getUserButton = new SimpleButton();
        pagePanel = new SimplePanel();
        pageIdField = new javax.swing.JTextField();
        getPageButton = new SimpleButton();

        setLayout(new java.awt.GridBagLayout());

        permPanel.setLayout(new java.awt.GridBagLayout());

        permTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Permission", "Status", "Get"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        permTablePane.setViewportView(permTable);
        if (permTable.getColumnModel().getColumnCount() > 0) {
            permTable.getColumnModel().getColumn(2).setResizable(false);
            permTable.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        permPanel.add(permTablePane, gridBagConstraints);

        selectAllPermissionsButton.setText("Select All");
        selectAllPermissionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllPermissionsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        permPanel.add(selectAllPermissionsButton, gridBagConstraints);

        askForTokenButton.setText("Get Token");
        askForTokenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askForTokenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        permPanel.add(askForTokenButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        permPanel.add(tokenField, gridBagConstraints);

        saveTokenButton.setText("Save Token");
        saveTokenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTokenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        permPanel.add(saveTokenButton, gridBagConstraints);

        tabPane.addTab("Permissions", permPanel);

        userPanel.setLayout(new java.awt.GridBagLayout());

        userIdField.setText("me");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        userPanel.add(userIdField, gridBagConstraints);

        getUserButton.setText("Get data");
        getUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUserButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        userPanel.add(getUserButton, gridBagConstraints);

        tabPane.addTab("Get User", userPanel);

        pagePanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pagePanel.add(pageIdField, gridBagConstraints);

        getPageButton.setText("Get data");
        getPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPageButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        pagePanel.add(getPageButton, gridBagConstraints);

        tabPane.addTab("Get Page", pagePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(tabPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void askForTokenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askForTokenButtonActionPerformed
        handlePermissionsRequest();
    }//GEN-LAST:event_askForTokenButtonActionPerformed

    private void saveTokenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTokenButtonActionPerformed
        setup();
        checkPermissionsStatus();
    }//GEN-LAST:event_saveTokenButtonActionPerformed

    private void getUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getUserButtonActionPerformed
        submit();
    }//GEN-LAST:event_getUserButtonActionPerformed

    private void selectAllPermissionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllPermissionsButtonActionPerformed
        allPermissionsSelected = !allPermissionsSelected;
        toggleAllPermissions(allPermissionsSelected);
    }//GEN-LAST:event_selectAllPermissionsButtonActionPerformed

    private void getPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPageButtonActionPerformed
        submit();
    }//GEN-LAST:event_getPageButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton askForTokenButton;
    private javax.swing.JButton getPageButton;
    private javax.swing.JButton getUserButton;
    private javax.swing.JTextField pageIdField;
    private javax.swing.JPanel pagePanel;
    private javax.swing.JPanel permPanel;
    private javax.swing.JTable permTable;
    private javax.swing.JScrollPane permTablePane;
    private javax.swing.JButton saveTokenButton;
    private javax.swing.JButton selectAllPermissionsButton;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTextField tokenField;
    private javax.swing.JTextField userIdField;
    private javax.swing.JPanel userPanel;
    // End of variables declaration//GEN-END:variables

   
   

}
